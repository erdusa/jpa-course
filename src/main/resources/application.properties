#DB
spring.datasource.url=jdbc:postgresql://localhost:5435/jpa-course?socketTimeout=30
spring.datasource.username=postgres
spring.datasource.password=postgres
# not necessary jpa autodetect this by the dependency used in gradle
# spring.datasource.driver-class-name=org.postgresql.Driver

# none: disabled auto ddl generation
# create-only: Generate the database schema from the entity model
# drop: tells hibernate to drop the database schema using the entity model as a reference for the DDL DROP statements
# create: drop the database schema in recreate it afterward using the entity model as a reference
# create-drop: drop the database schema in recreate it afterward using the entity model as a reference. And, upon closing
#               the JPA EntityManagerFactory or the Hibernate SessionFactory, the database schema will be dropped again
# validate: tells Hibernate to validate the underlying database schema against the entity mappings
# update: tells Hibernate that alter the database tables per entity mapping changes
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# HikariPool -> the default connection pool in spring boot is HikariCP

#Flyway
spring.flyway.enabled=true
spring.flyway.baseline-version=1
spring.flyway.schemas=public
spring.flyway.locations=classpath:db/migration
spring.flyway.sql-migration-suffixes=.sql
spring.flyway.baseline-on-migrate=true
spring.flyway.sql-migration-prefix=V

# generate sql for entities https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata

# test rest api with security using rest-assured https://www.youtube.com/watch?v=PAyGma2OMFo